/*
    rtmp.h

    Copyright (C) 2016 Hubtag LLC.

    ----------------------------------------

    This file is part of libOpenRTMP.

    libOpenRTMP is free software: you can redistribute it and/or modify
    it under the terms of version 3 of the GNU Affero General Public License
    as published by the Free Software Foundation.

    libOpenRTMP is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with libOpenRTMP. If not, see <http://www.gnu.org/licenses/>.

*/

#ifndef RTMP_H_H
#define RTMP_H_H

#ifdef __cplusplus
extern "C" {
#endif

/*! \addtogroup rtmp_ref RTMP
    @{ */

/*!
    \struct     rtmp_t
    \brief      A RTMP manager object.
    \remarks    \parblock
                This object is used to move data back and forth between RTMP streams and the network.
                This is one of the primary interfaces for accessing RTMP functionality in libOpenRTMP.
                \endparblock
 */
typedef struct rtmp_mgr * rtmp_t;

/*! @} */

typedef struct rtmp_params *rtmp_params_t;

typedef enum {
    RTMP_APP,
    RTMP_FLASHVER,
    RTMP_TCURL,
    RTMP_PAGEURL,
    RTMP_ACODEC,
    RTMP_VCODEC,
    RTMP_VFUNC,
    RTMP_OENC,
    RTMP_FPAD
} rtmp_param_name_t;

#include <openrtmp/rtmp/rtmp_types.h>
#include <openrtmp/amf/amf.h>
#include <openrtmp/rtmp/rtmp_client.h>
#include <openrtmp/rtmp/rtmp_server.h>
#include <openrtmp/rtmp/rtmp_app.h>


char * rtmp_params_get_s( rtmp_params_t params, rtmp_param_name_t name );
uint32_t rtmp_params_get_d( rtmp_params_t params, rtmp_param_name_t name );

/*! \brief      This callback is used by \ref rtmp_listen to indicate that a client has connected to the socket and is ready to communicate.
    \param      connection  An instance of a RTMP server object that was generated by a client connecting to a listening RTMP manager.
    \param      user        A user-defined pointer which was passed in with a call to `rtmp_listen`
    \return     See \ref callback_semantics
    \memberof   rtmp_t
*/
typedef rtmp_cb_status_t (*rtmp_connect_proc)(
    rtmp_server_t connection,
    void *user
);

/*! \brief      Creates an RTMP manager object.
    \noparam
    \return     If the return value is \ref nullptr, then the function failed to create an RTMP manager object.
    \return     Otherwise, the return value is an RTMP manager object.
    \memberof   rtmp_t
*/
rtmp_t rtmp_create( void );

/*! \brief      Destroys an RTMP manager object.
    \param      mgr      A pointer to a valid RTMP manager. \n Passing an invalid pointer, including \ref nullptr, is undefined.
    \noreturn
    \memberof   rtmp_t
*/
void rtmp_destroy( rtmp_t mgr );

/*! \brief      Sets the app list to use for connections made to this manager.
    \param      mgr     The manager to associate an app list with.
    \param      list    An app list to associate with \a mgr.
    \noreturn
    \remarks    Only connections established after this function is called will use the provided app list.
                Any outstanding connections will continue to use the app list which was associated with them when
                the connections were established.
    \memberof   rtmp_t
*/
void rtmp_set_app_list( rtmp_t mgr, rtmp_app_list_t list );

/*! \brief      Performs a service iteration over all connected streams.
    \param      mgr     The RTMP manager to service
    \param      timeout \parblock
                        The maximum number of milliseconds to block for.

                        A timeout value of `0` will return immediately unless there is network traffic to deal with,
                        in which case the traffic will be processed prior to this function returning.

                        A timeout value of `-1` will block forever until there is network traffic to deal with.
                        \endparblock
    \return     This function returns a libOpenRTMP error code.
    \memberof   rtmp_t
*/
rtmp_err_t rtmp_service( rtmp_t mgr, int timeout );

/*! \brief      Attempts to connect an RTMP client object to an RTMP manager object.
    \param      mgr     The RTMP manager to \a client connect to.
    \param      client  The RTMP client to connect with.
    \return     This function returns a libOpenRTMP error code.
    \remarks    After calling this connection, \a client will immediately attempt to connect to the pre-specified destination.
    \memberof   rtmp_t
*/
rtmp_err_t rtmp_connect( rtmp_t mgr, rtmp_client_t client );

/*! \brief      Disconnects a client from a manager.
    \param      mgr     The RTMP manager to disconnect from.
    \param      client  The RTMP client object to attempt to disconnect from \a mgr.
    \return     This function returns a libOpenRTMP error code.
    \memberof   rtmp_t
*/
rtmp_err_t rtmp_disconnect( rtmp_t mgr, rtmp_client_t client );

/*! \brief      Attempts to close the connection associated with an RTMP stream.
    \param      mgr     The RTMP manager to disconnect the stream from.
    \param      stream  The stream to disconnect. See remarks.
    \return     This function returns a libOpenRTMP error code.
    \remarks    This function is intended only to shutdown streams generated with \ref rtmp_listen.
                While it might be tempting to try and disconnect a client with this function, that is what \ref rtmp_disconnect is for.
                This function exists as a result of a somewhat poor architecture choice, so it might be refactored out at some point.
    \remarks    At some point it may be desireable to determine what kind of streams are associated with what object and act accordingly,
                though it might be a little bit less clear to the caller that there is a client which needs to be freed in some cases,
                but not in others.
    \memberof   rtmp_t
*/
rtmp_err_t rtmp_close_stream( rtmp_t mgr, rtmp_stream_t stream );

/*! \brief      Starts a listen loop on the RTMP manager to initiate connections with clients.
    \param      mgr     The manager to listen with.
    \param      iface   A string representing the network interface to listen on. \n
                        This may be \ref RTMP_ADDR_ANY, which refers to all interfaces.
    \param      port    The port to listen on for connections. \n
                        It is suggested that you use \ref RTMP_DEFAULT_PORT.
    \param      cb      An optional \ref rtmp_connect_proc which will be called when a connection is established. \n
                        If no callback is desired, pass in \ref nullptr.
    \param      user    A pointer which will be passed into \a cb.
    \return     This function returns a libOpenRTMP error code.
    \memberof   rtmp_t
*/
rtmp_err_t rtmp_listen( rtmp_t mgr, const char * iface, short port, rtmp_connect_proc cb, void *user );


/*! \addtogroup rtmp_ref RTMP
    @{ */

/*! \brief      Returns a libOpenRTMP error code derived from a libOpenRTMP AMF error code.
    \param      err     A libOpenRTMP AMF error code.
    \return     This function returns a libOpenRTMP error code based on \a err.
    \remarks    An attempt is made to convert the AMF error code into an equivalend RTMP error code.
                This is merely a convenience function for when an RTMP function depends on the success of an AMF processing function.
*/
rtmp_err_t rtmp_amferr( amf_err_t err );


#if RTMP_LOG_LEVEL == 0
#define RTMP_GEN_ERROR(err) (err)
#define RTMP_GEN_ERROR_MSG(err,msg) (err)
#else
#define RTMP_GEN_ERROR(err) rtmp_gen_error(err,__LINE__,__FILE__,"")
#define RTMP_GEN_ERROR_MSG(err,msg) rtmp_gen_error(err,__LINE__,__FILE__,msg)
#endif


/*! \brief      Performs logging on a libOpenRTMP error code.
    \param      err     The error code to log and return.
    \param      line    The line number to indicate in the logs.
    \param      file    The file name to indicate in the logs.
    \param      msg     A message to send with the status code.
    \return     This function returns \a err.
    \remarks    When returning a libOpenRTMP error code, this function should be used to perform logging.
                LibOpenRTMP uses this internally, so any errors will still be logged, however the closer to an error this function is called,
                the easier the error is to track.
    \remarks    It is strongly suggested that you make use of the macros \ref RTMP_GEN_ERROR and \ref RTMP_GEN_ERROR_MSG
                to automatically fill in the line and file information.
*/
rtmp_err_t rtmp_gen_error(rtmp_err_t err, size_t line, const char *file, const char *msg);

/*! \def        RTMP_GEN_ERROR_MSG(err,msg)
    \brief      Performs logging on a libOpenRTMP error code.
    \param      err     The error code to log and return.
    \param      msg     A message to send with the status code.
    \return     This macro returns \a err.
    \remarks    This is a convenience macro for \ref rtmp_gen_error
    \remarks    When returning a libOpenRTMP error code, this function should be used to perform logging.
                LibOpenRTMP uses this internally, so any errors will still be logged, however the closer to an error this function is called,
                the easier the error is to track.
*/
/*! \def        RTMP_GEN_ERROR(err)
    \brief      Performs logging on a libOpenRTMP error code.
    \param      err     The error code to log and return.
    \return     This macro returns \a err.
    \remarks    This is a convenience macro for \ref rtmp_gen_error
    \remarks    When returning a libOpenRTMP error code, this function should be used to perform logging.
                LibOpenRTMP uses this internally, so any errors will still be logged, however the closer to an error this function is called,
                the easier the error is to track.
*/
/* @} */

#ifdef __cplusplus
}
#endif

#endif
