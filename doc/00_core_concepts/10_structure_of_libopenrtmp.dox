/*!
	\page structure_of_libopenrtmp Structure of libOpenRTMP

	LibOpenRTMP is structured in multiple layers, which build on top of each other. A rough hierarchy of layers looks like:

	|AMF|Description|
	|:-:|:--|
	|`amf.h`|Provides basic encoding and decoding facilities for binary AMF data|
	|`amf_object.h`|Provides a logical abstraction for storing, reading, and manipulating AMF data|

	|RTMP|Description|
	|:-:|:--|
	|`rtmp_chunk_flow.h` `rtmp_chunk_cache.h`|Provides functions for reading and writing bits to and from binary streams directly.|
	|`rtmp_chunk_conn.h`|Provides facilities for establishing a connection and managing the protocol settings, as well as sending and receiving chunks/messages.|
	|`rtmp_chunk_assembler.h`|Provides an intermediate layer for fully assembling chunks into messages prior to processing.|
	|`rtmp_stream.h`|Provides higher level constructs for event driven callbacks, and RPC command and response flow.|
	|`rtmp_client.h` `rtmp_server.h` `rtmp_app.h`|Provides boilerplate for basic live stream server applications.|
	|`rtmp.h`|Moves data between `rtmp_stream_t` and the network.|

	Additionally, there are a few support functions which the library makes use of on many levels

	|Util|Description|
	|:-:|:--|
	|`algorithm.h`|Provides some generic void* algorithms for searching through data.|
	|`ieee754_double.h`|Provides the means for reading and writing IEEE 754 double precision floating point numbers.|
	|`memutil.h`|Provides some endianness flipping functions and some string functions.|
	|`parseurl.h`|An almost-RFC-compliant utility for parsing URLs.|
	|`ringbuffer.h`|A basic ringbuffer implementation.|
	|`vec.h`|A grotesquely complicated set of macros for creating and manipulating dynamic arrays.|
*/
